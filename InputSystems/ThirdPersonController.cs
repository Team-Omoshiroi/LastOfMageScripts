//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystems/ThirdPersonController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ThirdPersonController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ThirdPersonController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ThirdPersonController"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3cad0c7a-c95f-4f13-9588-f5aaf7729ddf"",
            ""actions"": [
                {
                    ""name"": ""MainTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""32b20964-3d5b-4e4a-a5f5-1c23c9b1710d"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CancelTouch"",
                    ""type"": ""Button"",
                    ""id"": ""263862a3-0b7c-4ec7-a3f6-b24ad4846267"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TapTouch"",
                    ""type"": ""Value"",
                    ""id"": ""b7f632e4-0b9c-4965-b0df-234a7f96c5b6"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""12cf45b4-50c7-4dda-ac86-22e50fafd3ae"",
                    ""path"": ""<Touchscreen>/touch0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PointerControl"",
                    ""action"": ""MainTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abb03837-b5a7-41ce-ba9e-052068429d5b"",
                    ""path"": ""<Touchscreen>/touch1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PointerControl"",
                    ""action"": ""MainTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""451640d8-830e-4651-abaa-2aa0fd557b5b"",
                    ""path"": ""<Touchscreen>/touch2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PointerControl"",
                    ""action"": ""MainTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d5a410d-581f-4984-b80d-dfb0206a9cfd"",
                    ""path"": ""<Touchscreen>/touch3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PointerControl"",
                    ""action"": ""MainTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edf6361a-85b6-4a18-a4b6-fd8686c091bb"",
                    ""path"": ""*/{Back}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PointerControl"",
                    ""action"": ""CancelTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91372eb2-1fcf-4f6c-b340-bfc7460c66a7"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PointerControl"",
                    ""action"": ""CancelTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9c12fe6-c249-4a78-8557-a274ef393475"",
                    ""path"": ""<Touchscreen>/touch0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PointerControl"",
                    ""action"": ""TapTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f14097b5-e136-4719-b99a-bcbccf6eb7d3"",
                    ""path"": ""<Touchscreen>/touch1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PointerControl"",
                    ""action"": ""TapTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e727349-8976-4dd4-a55c-b337191d8450"",
                    ""path"": ""<Touchscreen>/touch2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PointerControl"",
                    ""action"": ""TapTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e36e307a-41ad-46fc-aed6-0ead9a50ef10"",
                    ""path"": ""<Touchscreen>/touch3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PointerControl"",
                    ""action"": ""TapTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""1ecabac7-fe69-4ff5-a664-f58c62eadfe8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5d8b87e1-c016-479e-9f14-af5a57ef3a93"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""44a6a43b-ff49-41d9-8efe-300143afc679"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""0114cb3d-7e55-4cab-84fa-250bd24b4005"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""fa9bf891-438d-4dc1-9f37-4819bb694c1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""af5b8061-5edd-4398-ba9f-c88ab675c3de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fb91a612-5017-4017-8a57-071f277eb989"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fa7b4626-daba-43c5-95a3-02339d1e46af"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c193f537-bf41-4147-9d64-6adfd6fc0c60"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""df8fcc04-62f2-44b2-9ead-5914de3c75fe"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""67b2be1c-bef3-4a22-90ae-7b7e311bb143"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Position"",
                    ""id"": ""f9b7ec5a-c696-4e14-95ff-372e9961a730"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""e26a381e-cb36-4d3c-8805-8f7d799991d1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""557291b9-0178-40b2-acee-56968f3bf1d4"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Two Modifiers"",
                    ""id"": ""28b18efa-641d-4fa7-ab0e-35ea702c255b"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier1"",
                    ""id"": ""ef5a178a-abac-41fe-b26b-b16f78c8daa7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier2"",
                    ""id"": ""ae640d0b-9b6a-4a95-a5c5-564affcc25be"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""0f088d63-8048-45a6-893e-b5ed1211b182"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6b347ead-4bbc-4fdb-841e-0f7ca5f6a77f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfb70be5-4549-4612-9035-a3ff03e06836"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PointerControl"",
            ""bindingGroup"": ""PointerControl"",
            ""devices"": [
                {
                    ""devicePath"": ""<Pointer>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""bindingGroup"": ""Test"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MainTouch = m_Player.FindAction("MainTouch", throwIfNotFound: true);
        m_Player_CancelTouch = m_Player.FindAction("CancelTouch", throwIfNotFound: true);
        m_Player_TapTouch = m_Player.FindAction("TapTouch", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_Move = m_Test.FindAction("Move", throwIfNotFound: true);
        m_Test_Aim = m_Test.FindAction("Aim", throwIfNotFound: true);
        m_Test_Fire = m_Test.FindAction("Fire", throwIfNotFound: true);
        m_Test_Run = m_Test.FindAction("Run", throwIfNotFound: true);
        m_Test_Dodge = m_Test.FindAction("Dodge", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_MainTouch;
    private readonly InputAction m_Player_CancelTouch;
    private readonly InputAction m_Player_TapTouch;
    public struct PlayerActions
    {
        private @ThirdPersonController m_Wrapper;
        public PlayerActions(@ThirdPersonController wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainTouch => m_Wrapper.m_Player_MainTouch;
        public InputAction @CancelTouch => m_Wrapper.m_Player_CancelTouch;
        public InputAction @TapTouch => m_Wrapper.m_Player_TapTouch;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @MainTouch.started += instance.OnMainTouch;
            @MainTouch.performed += instance.OnMainTouch;
            @MainTouch.canceled += instance.OnMainTouch;
            @CancelTouch.started += instance.OnCancelTouch;
            @CancelTouch.performed += instance.OnCancelTouch;
            @CancelTouch.canceled += instance.OnCancelTouch;
            @TapTouch.started += instance.OnTapTouch;
            @TapTouch.performed += instance.OnTapTouch;
            @TapTouch.canceled += instance.OnTapTouch;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @MainTouch.started -= instance.OnMainTouch;
            @MainTouch.performed -= instance.OnMainTouch;
            @MainTouch.canceled -= instance.OnMainTouch;
            @CancelTouch.started -= instance.OnCancelTouch;
            @CancelTouch.performed -= instance.OnCancelTouch;
            @CancelTouch.canceled -= instance.OnCancelTouch;
            @TapTouch.started -= instance.OnTapTouch;
            @TapTouch.performed -= instance.OnTapTouch;
            @TapTouch.canceled -= instance.OnTapTouch;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private List<ITestActions> m_TestActionsCallbackInterfaces = new List<ITestActions>();
    private readonly InputAction m_Test_Move;
    private readonly InputAction m_Test_Aim;
    private readonly InputAction m_Test_Fire;
    private readonly InputAction m_Test_Run;
    private readonly InputAction m_Test_Dodge;
    public struct TestActions
    {
        private @ThirdPersonController m_Wrapper;
        public TestActions(@ThirdPersonController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Test_Move;
        public InputAction @Aim => m_Wrapper.m_Test_Aim;
        public InputAction @Fire => m_Wrapper.m_Test_Fire;
        public InputAction @Run => m_Wrapper.m_Test_Run;
        public InputAction @Dodge => m_Wrapper.m_Test_Dodge;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void AddCallbacks(ITestActions instance)
        {
            if (instance == null || m_Wrapper.m_TestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Dodge.started += instance.OnDodge;
            @Dodge.performed += instance.OnDodge;
            @Dodge.canceled += instance.OnDodge;
        }

        private void UnregisterCallbacks(ITestActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Dodge.started -= instance.OnDodge;
            @Dodge.performed -= instance.OnDodge;
            @Dodge.canceled -= instance.OnDodge;
        }

        public void RemoveCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestActions instance)
        {
            foreach (var item in m_Wrapper.m_TestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestActions @Test => new TestActions(this);
    private int m_PointerControlSchemeIndex = -1;
    public InputControlScheme PointerControlScheme
    {
        get
        {
            if (m_PointerControlSchemeIndex == -1) m_PointerControlSchemeIndex = asset.FindControlSchemeIndex("PointerControl");
            return asset.controlSchemes[m_PointerControlSchemeIndex];
        }
    }
    private int m_TestSchemeIndex = -1;
    public InputControlScheme TestScheme
    {
        get
        {
            if (m_TestSchemeIndex == -1) m_TestSchemeIndex = asset.FindControlSchemeIndex("Test");
            return asset.controlSchemes[m_TestSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMainTouch(InputAction.CallbackContext context);
        void OnCancelTouch(InputAction.CallbackContext context);
        void OnTapTouch(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
    }
}
